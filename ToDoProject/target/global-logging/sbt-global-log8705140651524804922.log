[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\yekat\AppData\Local\Temp\idea9.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\yekat\AppData\Local\Temp\idea9.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (AdoptOpenJDK Java 1.8.0_282)
[debug]       Load.loadUnit: plugins took 112.6397ms
[debug]       Load.loadUnit: defsScala took 0.3441ms
[debug] [Loading] Scanning directory C:\Users\yekat\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\yekat\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 28.5988 ms
[debug]           Load.resolveProject(global-plugins) took 64.7128ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\yekat\.sbt\1.0\plugins, plugins: List(<none>))) took 119.8677ms
[debug] [Loading] Done in C:\Users\yekat\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 152.3568ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3963ms
[debug]     Load.loadUnit(file:/C:/Users/yekat/.sbt/1.0/plugins/, ...) took 272.8717ms
[debug]   Load.apply: load took 537.7146ms
[debug]   Load.apply: resolveProjects took 7.9988ms
[debug]   Load.apply: finalTransforms took 170.3077ms
[debug]   Load.apply: config.delegates took 12.1599ms
[debug]   Load.apply: Def.make(settings)... took 1799.5113ms
[debug]   Load.apply: structureIndex took 288.7752ms
[debug]   Load.apply: mkStreams took 2.408ms
[info] loading global plugins from C:\Users\yekat\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6018.2842ms
[debug]           Load.loadUnit: plugins took 42.6832ms
[debug]           Load.loadUnit: defsScala took 0.0098ms
[debug] [Loading] Scanning directory D:\ScalaProjects\ToDoProject\project
[debug]             Load.loadUnit: mkEval took 5.9306ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\ScalaProjects\ToDoProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.887 ms
[info] loading settings for project todoproject-build from idea9.sbt ...
[debug]               Load.resolveProject(todoproject-build) took 5.1239ms
[debug]             Load.loadTransitive: finalizeProject(Project(id todoproject-build, base: D:\ScalaProjects\ToDoProject\project, plugins: List(<none>))) took 11.0509ms
[debug] [Loading] Done in D:\ScalaProjects\ToDoProject\project, returning: (todoproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 218.1011ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.2623ms
[debug]         Load.loadUnit(file:/D:/ScalaProjects/ToDoProject/project/, ...) took 268.5302ms
[debug]       Load.apply: load took 273.6651ms
[debug]       Load.apply: resolveProjects took 0.2237ms
[debug]       Load.apply: finalTransforms took 37.4093ms
[debug]       Load.apply: config.delegates took 0.6893ms
[debug]       Load.apply: Def.make(settings)... took 196.4829ms
[debug]       Load.apply: structureIndex took 103.5126ms
[debug]       Load.apply: mkStreams took 0.0037ms
[info] loading project definition from D:\ScalaProjects\ToDoProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1258.8421ms
[debug]     Load.loadUnit: defsScala took 0.0081ms
[debug] [Loading] Scanning directory D:\ScalaProjects\ToDoProject
[debug]       Load.loadUnit: mkEval took 0.5121ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\ScalaProjects\ToDoProject, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 11.3084 ms
[info] loading settings for project todoproject from build.sbt ...
[debug]         Load.resolveProject(todoproject) took 77.6861ms
[debug]       Load.loadTransitive: finalizeProject(Project(id todoproject, base: D:\ScalaProjects\ToDoProject, plugins: List(<none>))) took 91.171ms
[debug] [Loading] Done in D:\ScalaProjects\ToDoProject, returning: (todoproject)
[debug]     Load.loadUnit: loadedProjectsRaw took 275.5349ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.1194ms
[debug]   Load.loadUnit(file:/D:/ScalaProjects/ToDoProject/, ...) took 1546.5876ms
[debug] Load.apply: load took 1549.2718ms
[debug] Load.apply: resolveProjects took 0.1344ms
[debug] Load.apply: finalTransforms took 73.4241ms
[debug] Load.apply: config.delegates took 0.6271ms
[debug] Load.apply: Def.make(settings)... took 258.656ms
[debug] Load.apply: structureIndex took 78.2264ms
[debug] Load.apply: mkStreams took 0.0044ms
[info] set current project to untitled1 (in build file:/D:/ScalaProjects/ToDoProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57686 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57686, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to untitled1 (in build file:/D:/ScalaProjects/ToDoProject/)
[debug] > Exec(idea-shell, None, None)
